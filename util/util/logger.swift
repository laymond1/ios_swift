//
//  logger.swift
//  util
//
//  Created by ÏûÑÏõêÏÑ† on 2020. 3. 4..
//  Copyright ¬© 2020ÎÖÑ ÏûÑÏõêÏÑ†. All rights reserved.
//

import Foundation

public enum LogLevel: String {
    case none = ""
    case success = "‚úÖ"
    case info = "‚ÑπÔ∏è"
    case warning = "‚ö†Ô∏è"
    case error = "üõë"
}

open class OpenLogger {
    open static func OpenlogMessage(log: String, level: LogLevel,  file: String = #file,  line: Int = #line) {
        print(level.rawValue, file, line, log)
    }
    public static func PubliclogMessage(log: String) {
        print(log)
    }
    internal static func InternallogMessage(log: String) {
        print(log)
    }
    private static func PrivatelogMessage(log: String) {
        print(log)
    }
    fileprivate static func FilePrivatelogMessage(log: String) {
        print(log)
    }
}

public class  PublicLogger {
    open static func OpenlogMessage(log: String) {
        print(log)
    }
    public static func PubliclogMessage(log: String) {
        print(log)
    }
    internal static func InternallogMessage(log: String) {
        print(log)
    }
    private static func PrivatelogMessage(log: String) {
        print(log)
    }
    fileprivate static func FilePrivatelogMessage(log: String) {
        print(log)
    }
}

internal class InternalLogger {
    open static func OpenlogMessage(log: String) {
        print(log)
    }
    public static func PubliclogMessage(log: String) {
        print(log)
    }
    internal static func InternallogMessage(log: String) {
        print(log)
    }
    private static func PrivatelogMessage(log: String) {
        print(log)
    }
    fileprivate static func FilePrivatelogMessage(log: String) {
        print(log)
    }
}

